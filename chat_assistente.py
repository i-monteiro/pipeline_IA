import streamlit as st
import time
from openai import OpenAI
from elevenlabs import ElevenLabs
import os
from dotenv import load_dotenv
from datetime import datetime
import re  # Importa√ß√£o adicional

load_dotenv()

# Configura√ß√£o das chaves de API
OPENAI_API_KEY = os.getenv("API_KEY")
ELEVEN_API_KEY = os.getenv("ELEVEN_API_KEY")

# Verifique se as chaves est√£o carregadas corretamente
if not OPENAI_API_KEY or not ELEVEN_API_KEY:
    raise ValueError("As chaves de API n√£o foram carregadas corretamente. Verifique o arquivo .env.")

# Instanciar os clientes OpenAI e Eleven Labs
openai_client = OpenAI(api_key=OPENAI_API_KEY)
eleven_client = ElevenLabs(api_key=ELEVEN_API_KEY)

# ID do Assistente
ASSISTANT_ID = os.getenv("ASSISTANT_ID")

# Fun√ß√£o para converter texto em fala usando Eleven Labs
def text_to_speech(text):
    """Converte texto em √°udio usando a API da Eleven Labs e retorna o √°udio."""
    # Gera o √°udio usando o modelo multil√≠ngue
    audio_generator = eleven_client.generate(
        text=text,
        voice="nsQAxyXwUKBvqtEK9MfK",  # Use um ID de voz que suporte portugu√™s
        model="eleven_multilingual_v2"  # Usa o modelo multil√≠ngue para suportar portugu√™s
    )
    
    # Converte o gerador em bytes
    audio_bytes = b''.join(list(audio_generator))  # Transforma o gerador em bytes
    
    return audio_bytes

# Fun√ß√£o para enviar a pergunta ao assistente e obter a resposta
def responder_pergunta(pergunta):
    # Cria um novo thread com a mensagem do usu√°rio
    thread = openai_client.beta.threads.create(
        messages=[
            {
                "role": "user",
                "content": f"hoje √© dia {datetime.now()} {pergunta}",
            }
        ]
    )

    # Envia o thread para o assistente (como uma nova execu√ß√£o)
    run = openai_client.beta.threads.runs.create(thread_id=thread.id, assistant_id=ASSISTANT_ID)
    st.write(f"üëâ Conversa id: {run.id}")

    # Aguarda a conclus√£o da execu√ß√£o
    while run.status != "completed":
        run = openai_client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
        st.write(f"üèÉ Status da execu√ß√£o: {run.status}")
        time.sleep(1)

    st.write("üèÅ Execu√ß√£o conclu√≠da!")

    # Obt√©m a √∫ltima mensagem do thread
    message_response = openai_client.beta.threads.messages.list(thread_id=thread.id)
    messages = message_response.data

    # Extrai e retorna a resposta mais recente
    latest_message = messages[0]
    resposta_texto = latest_message.content[0].text.value.strip()
    
    # Remove as cita√ß√µes do texto
    resposta_texto = re.sub(r'„Äê.*?„Äë', '', resposta_texto)  # Linha adicionada
    
    # Converte a resposta em √°udio
    resposta_audio = text_to_speech(resposta_texto)
    
    return resposta_texto, resposta_audio

# Interface do Streamlit
st.title("Agente de Atendimento - Pergunte ao Assistente")

# Caixa de entrada para perguntas
pergunta = st.text_input("Digite sua pergunta:")

# Quando uma pergunta √© feita, envia para o assistente e exibe a resposta
if pergunta:
    resposta_texto, resposta_audio = responder_pergunta(pergunta)
    st.write(f"üí¨ Resposta: {resposta_texto}")
    
    # Reproduz o √°udio da resposta
    st.audio(resposta_audio, format='audio/mp3')
